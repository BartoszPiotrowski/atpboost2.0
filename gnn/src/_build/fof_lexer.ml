# 1 "fof_lexer.mll"
 
  open Cnf;;
  open Lexing;;
  open Fof_parse;;

# 8 "fof_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\232\255\233\255\082\000\160\000\236\255\237\255\080\000\
    \242\255\243\255\000\000\018\001\020\001\248\255\249\255\250\255\
    \251\255\252\255\010\000\083\000\130\000\244\255\247\255\025\001\
    \246\255\239\255\002\000\029\000\241\255\240\255\070\001\053\000\
    \084\000\086\000\255\255\253\255\254\255\218\000\219\000\220\000\
    \255\255\253\255\254\255\184\001\006\002\027\001\035\001\033\001\
    \254\255\053\001\253\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\021\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\010\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\001\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\017\000\255\255\255\255\020\000\255\255\
    \003\000\255\255\255\255\255\255\255\255\255\255\003\000\255\255\
    \255\255\255\255\255\255\255\255\001\000\000\000\255\255\255\255\
    \255\255\000\000\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\019\000\020\000\000\000\000\000\255\255\
    \000\000\000\000\255\255\255\255\000\000\000\000\255\255\032\000\
    \032\000\255\255\000\000\000\000\000\000\038\000\038\000\255\255\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\018\000\000\000\000\000\018\000\000\000\000\000\
    \000\000\000\000\000\000\018\000\018\000\000\000\000\000\018\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\012\000\001\000\019\000\004\000\020\000\006\000\002\000\
    \016\000\015\000\018\000\008\000\013\000\003\000\014\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\007\000\010\000\025\000\011\000\
    \029\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\028\000\034\000\255\255\000\000\003\000\
    \255\255\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\255\255\005\000\035\000\009\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\255\255\027\000\000\000\255\255\
    \000\000\033\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \255\255\003\000\036\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\030\000\026\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\000\000\040\000\255\255\041\000\030\000\
    \017\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\011\000\011\000\023\000\023\000\011\000\
    \000\000\023\000\023\000\023\000\045\000\045\000\023\000\000\000\
    \045\000\000\000\047\000\047\000\049\000\049\000\047\000\000\000\
    \049\000\000\000\011\000\000\000\023\000\255\255\039\000\255\255\
    \042\000\023\000\000\000\045\000\000\000\000\000\049\000\049\000\
    \000\000\047\000\049\000\049\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
    \000\000\021\000\000\000\255\255\255\255\049\000\000\000\000\000\
    \000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\024\000\000\000\022\000\
    \000\000\000\000\000\000\030\000\022\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \047\000\000\000\255\255\000\000\000\000\000\000\000\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\000\000\000\000\000\000\000\000\030\000\000\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\045\000\045\000\000\000\000\000\045\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \045\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\044\000\000\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\000\000\000\000\000\000\000\000\044\000\
    \000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\000\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\000\000\000\000\000\000\000\000\044\000\000\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\018\000\018\000\255\255\255\255\018\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\010\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\027\000\031\000\019\000\255\255\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\032\000\000\000\033\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\020\000\007\000\255\255\020\000\
    \255\255\031\000\255\255\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\255\255\255\255\255\255\
    \032\000\003\000\033\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\004\000\007\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\037\000\038\000\039\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\011\000\011\000\012\000\012\000\011\000\
    \255\255\012\000\023\000\023\000\045\000\045\000\023\000\255\255\
    \045\000\255\255\047\000\047\000\046\000\046\000\047\000\255\255\
    \046\000\255\255\011\000\255\255\012\000\031\000\037\000\038\000\
    \039\000\023\000\255\255\045\000\255\255\255\255\049\000\049\000\
    \255\255\047\000\049\000\046\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\000\
    \255\255\012\000\255\255\019\000\032\000\049\000\255\255\255\255\
    \255\255\255\255\255\255\047\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\011\000\255\255\012\000\
    \255\255\255\255\255\255\030\000\023\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \046\000\255\255\020\000\255\255\255\255\255\255\255\255\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\255\255\255\255\255\255\255\255\030\000\255\255\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\043\000\043\000\255\255\255\255\043\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \043\000\255\255\037\000\038\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\043\000\255\255\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\255\255\255\255\255\255\255\255\043\000\
    \255\255\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\044\000\255\255\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\255\255\255\255\255\255\255\255\044\000\255\255\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec hhlex lexbuf =
    __ocaml_lex_hhlex_rec lexbuf 0
and __ocaml_lex_hhlex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 13 "fof_lexer.mll"
                     (hhlex lexbuf)
# 251 "fof_lexer.ml"

  | 1 ->
# 14 "fof_lexer.mll"
                     (hhlex lexbuf)
# 256 "fof_lexer.ml"

  | 2 ->
# 15 "fof_lexer.mll"
                     ((*Printf.printf "w%!"; *)hhlex lexbuf)
# 261 "fof_lexer.ml"

  | 3 ->
# 16 "fof_lexer.mll"
                     (Eof)
# 266 "fof_lexer.ml"

  | 4 ->
# 17 "fof_lexer.mll"
                     ((*Printf.printf "(%!"; *)Openp)
# 271 "fof_lexer.ml"

  | 5 ->
# 18 "fof_lexer.mll"
                     ((*Printf.printf ")%!"; *)Closep)
# 276 "fof_lexer.ml"

  | 6 ->
# 19 "fof_lexer.mll"
                     (Dot)
# 281 "fof_lexer.ml"

  | 7 ->
# 20 "fof_lexer.mll"
                     (Comma)
# 286 "fof_lexer.ml"

  | 8 ->
# 21 "fof_lexer.mll"
                     ((*Printf.printf "!%!"; *)All (lex_ids lexbuf))
# 291 "fof_lexer.ml"

  | 9 ->
# 22 "fof_lexer.mll"
                     (Ex (lex_ids lexbuf))
# 296 "fof_lexer.ml"

  | 10 ->
# 23 "fof_lexer.mll"
                     (Eq)
# 301 "fof_lexer.ml"

  | 11 ->
# 24 "fof_lexer.mll"
                     (Neq)
# 306 "fof_lexer.ml"

  | 12 ->
# 25 "fof_lexer.mll"
                     (Tilde)
# 311 "fof_lexer.ml"

  | 13 ->
# 26 "fof_lexer.mll"
                     (Plus)
# 316 "fof_lexer.ml"

  | 14 ->
# 27 "fof_lexer.mll"
                     (Eqvt)
# 321 "fof_lexer.ml"

  | 15 ->
# 28 "fof_lexer.mll"
                     (Neqvt)
# 326 "fof_lexer.ml"

  | 16 ->
# 29 "fof_lexer.mll"
                     ((*Printf.printf ">%!"; *)Impl)
# 331 "fof_lexer.ml"

  | 17 ->
# 30 "fof_lexer.mll"
                     ((*Printf.printf ">%!"; *)Revimpl)
# 336 "fof_lexer.ml"

  | 18 ->
# 31 "fof_lexer.mll"
                     ((*Printf.printf "&%!"; *)And)
# 341 "fof_lexer.ml"

  | 19 ->
# 32 "fof_lexer.mll"
                     (Or)
# 346 "fof_lexer.ml"

  | 20 ->
# 33 "fof_lexer.mll"
                     (Word (Lexing.lexeme lexbuf))
# 351 "fof_lexer.ml"

  | 21 ->
# 34 "fof_lexer.mll"
                     ((*Printf.printf "w%!"; *)let s = Lexing.lexeme lexbuf in Word (if s = "#" then "'#'" else s) )
# 356 "fof_lexer.ml"

  | 22 ->
# 35 "fof_lexer.mll"
                     (Word ("'" ^ lex_squot lexbuf ^ "'"))
# 361 "fof_lexer.ml"

  | 23 ->
# 36 "fof_lexer.mll"
                     (Word ("\"" ^ lex_dquot lexbuf ^ "\""))
# 366 "fof_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_hhlex_rec lexbuf __ocaml_lex_state

and lex_squot lexbuf =
    __ocaml_lex_lex_squot_rec lexbuf 31
and __ocaml_lex_lex_squot_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 39 "fof_lexer.mll"
                     ("")
# 377 "fof_lexer.ml"

  | 1 ->
# 40 "fof_lexer.mll"
                     ("\\" ^ lex_squot lexbuf)
# 382 "fof_lexer.ml"

  | 2 ->
# 41 "fof_lexer.mll"
                     ("'" ^ lex_squot lexbuf)
# 387 "fof_lexer.ml"

  | 3 ->
# 42 "fof_lexer.mll"
                     (let s = Lexing.lexeme lexbuf in s ^ lex_squot lexbuf)
# 392 "fof_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lex_squot_rec lexbuf __ocaml_lex_state

and lex_dquot lexbuf =
    __ocaml_lex_lex_dquot_rec lexbuf 37
and __ocaml_lex_lex_dquot_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 45 "fof_lexer.mll"
                     ("")
# 403 "fof_lexer.ml"

  | 1 ->
# 46 "fof_lexer.mll"
                     ("\\" ^ lex_dquot lexbuf)
# 408 "fof_lexer.ml"

  | 2 ->
# 47 "fof_lexer.mll"
                     ("\"" ^ lex_dquot lexbuf)
# 413 "fof_lexer.ml"

  | 3 ->
# 48 "fof_lexer.mll"
                     (let s = Lexing.lexeme lexbuf in s ^ lex_dquot lexbuf)
# 418 "fof_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lex_dquot_rec lexbuf __ocaml_lex_state

and lex_ids lexbuf =
    __ocaml_lex_lex_ids_rec lexbuf 43
and __ocaml_lex_lex_ids_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 51 "fof_lexer.mll"
                     (lex_ids lexbuf)
# 429 "fof_lexer.ml"

  | 1 ->
# 52 "fof_lexer.mll"
                     (let i = Lexing.lexeme lexbuf in
                      i :: (lex_ids_more lexbuf))
# 435 "fof_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lex_ids_rec lexbuf __ocaml_lex_state

and lex_ids_more lexbuf =
    __ocaml_lex_lex_ids_more_rec lexbuf 46
and __ocaml_lex_lex_ids_more_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 56 "fof_lexer.mll"
                     (lex_ids_more lexbuf)
# 446 "fof_lexer.ml"

  | 1 ->
# 57 "fof_lexer.mll"
                     (lex_ids lexbuf)
# 451 "fof_lexer.ml"

  | 2 ->
# 58 "fof_lexer.mll"
                     ([])
# 456 "fof_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lex_ids_more_rec lexbuf __ocaml_lex_state

;;

# 60 "fof_lexer.mll"
 
let file fname =
  let inc = if fname = "-" then stdin else open_in fname in
  let lexb = Lexing.from_channel inc in
  let rec prf acc =
    try
      let v =
        try Fof_parse.fof_top hhlex lexb
        with Parsing.YYexit a -> Obj.magic a
      in
      prf (v :: acc)
    with End_of_file -> close_in inc; acc
  in
  prf [];;

let data_file fname =
  let inc = if fname = "-" then stdin else open_in fname in
  let lexb = Lexing.from_channel inc in
  let rec prf acc =
    match
      try Some (Fof_parse.fof_data hhlex lexb)
      with Parsing.YYexit a -> Some (Obj.magic a)
      | End_of_file -> None
    with
      Some v -> prf (v :: acc)
    | None -> close_in inc; acc
  in
  prf [];;

let problem fname =
  let fofs = file fname in
  let ths = List.map (fun (_,_,x) -> x) (List.filter (fun (_, x, _) -> x = "axiom" || x = "hypothesis" || x = "definition" || x = "lemma" || x = "theorem" || x = "plain") fofs) in
  match List.map (fun (_,_,x) -> x) (List.filter (fun (_, x, _) -> x = "conjecture") fofs) with
    h :: t -> (ths, List.fold_left (fun a b -> Disj (a, b)) h t)
  | _ ->
    match List.map (fun (_,_,x) -> x) (List.filter (fun (_, x, _) -> x = "negated_conjecture") fofs) with
      h :: t -> (ths, Neg (List.fold_left (fun a b -> Conj (a, b)) h t))
    | _ -> failwith "No conjecture or negated conjecture";;


# 503 "fof_lexer.ml"
