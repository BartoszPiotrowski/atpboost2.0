
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEXISTSleftFORALLleftRIMPLleftIMPLleftNEQUIVleftEQUIVleftNORleftORleftNANDleftANDrightNEGleftEQleftNEQAND EQ EQUIV EXISTS FORALL IMPL NAND NEG NEQ NEQUIV NOR OR RIMPL STR SYMBOL VARIABLEcmd_list : cmd_list cmdcmd_list : cmd : symbol "(" symbol ")" "."cmd : symbol "(" symbol "," symbol "," formula ")" "."var_list : VARIABLEvar_list : var_list "," VARIABLEformula : "(" formula ")"formula : FORALL "[" var_list "]" ":" formulaformula : EXISTS "[" var_list "]" ":" formulaformula : formula RIMPL formulaformula : formula IMPL formulaformula : formula NEQUIV formulaformula : formula EQUIV formulaformula : formula NOR formulaformula : formula OR formulaformula : formula NAND formulaformula : formula AND formulaformula : NEG formulaformula : symbol "(" term_list ")"formula : symbolformula : term EQ termformula : term NEQ termterm_list : termterm_list : term_list "," termterm : "(" term ")"term : symbol "(" term_list ")"term : symbolterm : VARIABLEsymbol : SYMBOL\n              | STR'
    
_lr_action_items = {'SYMBOL':([0,1,2,6,9,10,12,14,18,21,25,26,27,28,29,30,31,32,36,37,39,44,58,61,67,69,],[-2,4,-1,4,4,-3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-4,4,4,4,4,]),'STR':([0,1,2,6,9,10,12,14,18,21,25,26,27,28,29,30,31,32,36,37,39,44,58,61,67,69,],[-2,5,-1,5,5,-3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-4,5,5,5,5,]),'$end':([0,1,2,10,44,],[-2,0,-1,-3,-4,]),'(':([3,4,5,12,13,14,18,21,25,26,27,28,29,30,31,32,36,37,38,39,58,61,67,69,],[6,-29,-30,14,21,14,14,39,14,14,14,14,14,14,14,14,39,39,58,39,39,39,14,14,]),')':([4,5,7,13,15,20,22,23,35,38,40,41,42,43,45,46,47,48,49,50,51,52,56,57,59,60,65,66,70,71,72,],[-29,-30,8,-20,24,-28,42,43,-18,-27,60,-23,-7,-25,-10,-11,-12,-13,-14,-15,-16,-17,-21,-22,43,-19,70,-24,-26,-8,-9,]),',':([4,5,7,11,20,38,40,41,43,53,54,55,65,66,68,70,],[-29,-30,9,12,-28,-27,61,-23,-25,63,-5,63,61,-24,-6,-26,]),'RIMPL':([4,5,13,15,20,22,35,38,42,43,45,46,47,48,49,50,51,52,56,57,60,70,71,72,],[-29,-30,-20,25,-28,25,-18,-27,-7,-25,-10,-11,-12,-13,-14,-15,-16,-17,-21,-22,-19,-26,25,25,]),'IMPL':([4,5,13,15,20,22,35,38,42,43,45,46,47,48,49,50,51,52,56,57,60,70,71,72,],[-29,-30,-20,26,-28,26,-18,-27,-7,-25,26,-11,-12,-13,-14,-15,-16,-17,-21,-22,-19,-26,26,26,]),'NEQUIV':([4,5,13,15,20,22,35,38,42,43,45,46,47,48,49,50,51,52,56,57,60,70,71,72,],[-29,-30,-20,27,-28,27,-18,-27,-7,-25,27,27,-12,-13,-14,-15,-16,-17,-21,-22,-19,-26,27,27,]),'EQUIV':([4,5,13,15,20,22,35,38,42,43,45,46,47,48,49,50,51,52,56,57,60,70,71,72,],[-29,-30,-20,28,-28,28,-18,-27,-7,-25,28,28,28,-13,-14,-15,-16,-17,-21,-22,-19,-26,28,28,]),'NOR':([4,5,13,15,20,22,35,38,42,43,45,46,47,48,49,50,51,52,56,57,60,70,71,72,],[-29,-30,-20,29,-28,29,-18,-27,-7,-25,29,29,29,29,-14,-15,-16,-17,-21,-22,-19,-26,29,29,]),'OR':([4,5,13,15,20,22,35,38,42,43,45,46,47,48,49,50,51,52,56,57,60,70,71,72,],[-29,-30,-20,30,-28,30,-18,-27,-7,-25,30,30,30,30,30,-15,-16,-17,-21,-22,-19,-26,30,30,]),'NAND':([4,5,13,15,20,22,35,38,42,43,45,46,47,48,49,50,51,52,56,57,60,70,71,72,],[-29,-30,-20,31,-28,31,-18,-27,-7,-25,31,31,31,31,31,31,-16,-17,-21,-22,-19,-26,31,31,]),'AND':([4,5,13,15,20,22,35,38,42,43,45,46,47,48,49,50,51,52,56,57,60,70,71,72,],[-29,-30,-20,32,-28,32,-18,-27,-7,-25,32,32,32,32,32,32,32,-17,-21,-22,-19,-26,32,32,]),'EQ':([4,5,13,19,20,23,43,60,],[-29,-30,-27,36,-28,36,-25,-26,]),'NEQ':([4,5,13,19,20,23,43,60,],[-29,-30,-27,37,-28,37,-25,-26,]),'.':([8,24,],[10,44,]),'FORALL':([12,14,18,25,26,27,28,29,30,31,32,67,69,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'EXISTS':([12,14,18,25,26,27,28,29,30,31,32,67,69,],[17,17,17,17,17,17,17,17,17,17,17,17,17,]),'NEG':([12,14,18,25,26,27,28,29,30,31,32,67,69,],[18,18,18,18,18,18,18,18,18,18,18,18,18,]),'VARIABLE':([12,14,18,21,25,26,27,28,29,30,31,32,33,34,36,37,39,58,61,63,67,69,],[20,20,20,20,20,20,20,20,20,20,20,20,54,54,20,20,20,20,20,68,20,20,]),'[':([16,17,],[33,34,]),']':([53,54,55,68,],[62,-5,64,-6,]),':':([62,64,],[67,69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cmd_list':([0,],[1,]),'cmd':([1,],[2,]),'symbol':([1,6,9,12,14,18,21,25,26,27,28,29,30,31,32,36,37,39,58,61,67,69,],[3,7,11,13,13,13,38,13,13,13,13,13,13,13,13,38,38,38,38,38,13,13,]),'formula':([12,14,18,25,26,27,28,29,30,31,32,67,69,],[15,22,35,45,46,47,48,49,50,51,52,71,72,]),'term':([12,14,18,21,25,26,27,28,29,30,31,32,36,37,39,58,61,67,69,],[19,23,19,41,19,19,19,19,19,19,19,19,56,57,59,41,66,19,19,]),'term_list':([21,58,],[40,65,]),'var_list':([33,34,],[53,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cmd_list","S'",1,None,None,None),
  ('cmd_list -> cmd_list cmd','cmd_list',2,'p_cmd_list_cont','tptp_parser.py',103),
  ('cmd_list -> <empty>','cmd_list',0,'p_cmd_list_empty','tptp_parser.py',107),
  ('cmd -> symbol ( symbol ) .','cmd',5,'p_cmd_include','tptp_parser.py',111),
  ('cmd -> symbol ( symbol , symbol , formula ) .','cmd',9,'p_cmd_fof','tptp_parser.py',115),
  ('var_list -> VARIABLE','var_list',1,'p_var_list_sng','tptp_parser.py',120),
  ('var_list -> var_list , VARIABLE','var_list',3,'p_var_list_cont','tptp_parser.py',123),
  ('formula -> ( formula )','formula',3,'p_formula_capsule','tptp_parser.py',128),
  ('formula -> FORALL [ var_list ] : formula','formula',6,'p_formula_forall','tptp_parser.py',131),
  ('formula -> EXISTS [ var_list ] : formula','formula',6,'p_formula_exists','tptp_parser.py',134),
  ('formula -> formula RIMPL formula','formula',3,'p_formula_rimpl','tptp_parser.py',137),
  ('formula -> formula IMPL formula','formula',3,'p_formula_impl','tptp_parser.py',140),
  ('formula -> formula NEQUIV formula','formula',3,'p_formula_nequiv','tptp_parser.py',143),
  ('formula -> formula EQUIV formula','formula',3,'p_formula_equiv','tptp_parser.py',146),
  ('formula -> formula NOR formula','formula',3,'p_formula_nor','tptp_parser.py',149),
  ('formula -> formula OR formula','formula',3,'p_formula_or','tptp_parser.py',152),
  ('formula -> formula NAND formula','formula',3,'p_formula_nand','tptp_parser.py',155),
  ('formula -> formula AND formula','formula',3,'p_formula_and','tptp_parser.py',158),
  ('formula -> NEG formula','formula',2,'p_formula_neg','tptp_parser.py',161),
  ('formula -> symbol ( term_list )','formula',4,'p_formula_atom','tptp_parser.py',165),
  ('formula -> symbol','formula',1,'p_formula_atom_const','tptp_parser.py',168),
  ('formula -> term EQ term','formula',3,'p_formula_atom_eq','tptp_parser.py',171),
  ('formula -> term NEQ term','formula',3,'p_formula_atom_neq','tptp_parser.py',174),
  ('term_list -> term','term_list',1,'p_term_list_sng','tptp_parser.py',178),
  ('term_list -> term_list , term','term_list',3,'p_term_list_cont','tptp_parser.py',181),
  ('term -> ( term )','term',3,'p_term_capsule','tptp_parser.py',186),
  ('term -> symbol ( term_list )','term',4,'p_term_func','tptp_parser.py',189),
  ('term -> symbol','term',1,'p_term_const','tptp_parser.py',192),
  ('term -> VARIABLE','term',1,'p_term_var','tptp_parser.py',195),
  ('symbol -> SYMBOL','symbol',1,'p_symbol','tptp_parser.py',199),
  ('symbol -> STR','symbol',1,'p_symbol','tptp_parser.py',200),
]
